#! /usr/bin/env python
#
# Author: Tejaswi Digumarti (tejaswi.digumarti@sydney.edu.au)
# Description: This code demonstrates the control of the robot arm and its gripper over ROS using python.

import rospy
import geometry_msgs.msg
from move_group_interface import MoveGroupPythonInteface
from gazebo_ros_link_attacher.srv import Attach, AttachRequest, AttachResponse


def demo_print_information(mgpi):
    """
    Prints some useful information.
    :param mgpi: An object of the MoveGroupPythonInterface class
    """
    print("\n**********************************")
    print("  2. Controlling in Joint Space")
    print("**********************************")
    print("  2.1 Print Basic Information")
    print("----------------------------------")
    raw_input("Press Enter to continue...")

    mgpi.print_useful_info()  # Print useful information

    print("\n  2.2 Current Robot State")
    print("---------------------------------")
    raw_input("Press Enter to continue...")

    mgpi.print_robot_state()  # Print the current state of the robot


def demo_joint_space_control(mgpi):
    """
    Demonstrates the use of joint angles to control the arm.
    :param mgpi: An object of the MoveGroupPythonInterface class
    """
    print("\n**********************************")
    print("  3. Controlling in Joint Space")
    print("**********************************")
    print("3.1 Move the robot to predefined \"home\" state.")
    print("---------------------------------------------------")
    print("- This home state is defined in universal_robot/ur5_e_moveit_config/config/ur5e.srdf")
    print("- Please DO NOT edit this file.")
    raw_input("Press Enter to continue...")

    # predefined state "home" is defined in universal_robot/ur5_e_moveit_config/config/ur5e.srdf
    mgpi.move_to_joint_state(mgpi.home_joint_angles)

    print("\n3.2 Move the robot to a desired joint state.")
    print("-----------------------------------------------")
    print("- The desired joint state in degrees is [-45, -30, 60, -135, 75, 20]")
    print("- The angles are to be entered in radians.")
    print("- The order of the angles is from the base joint to the wrist joint.")
    raw_input("Press Enter to continue..")

    mgpi.move_to_joint_state([-0.78, -0.7, 1.05, -2.36, 1.39, 0.35])  # values are in radians

    print("\nPress Enter to return back to home state.")
    raw_input()
    mgpi.move_to_joint_state(mgpi.home_joint_angles)


def demo_cartesian_space_control(mgpi):
    """
    Demonstrates the use of pose in Cartesian space to control the arm.
    :param mgpi: An object of the MoveGroupPythonInterface class
    """
    print("\n*************************************************")
    print("  4. Moving the end-effector in Cartesian space")
    print("*************************************************")
    print("- The desired pose is expressed using the geometry_msgs.msg.Pose() message.")
    print("- Position is a point in 3D space (x, y, z)")
    print("- Orientation is a quaternion")
    raw_input("Press Enter to continue..")

    target_pose = geometry_msgs.msg.Pose()
    target_pose.position.x = 0.15
    target_pose.position.y = 0.45
    target_pose.position.z = 0.6
    target_pose.orientation.x = 1.0
    target_pose.orientation.y = 0.0
    target_pose.orientation.z = 0.0
    target_pose.orientation.w = 0.0
    mgpi.move_eef_to_pose(target_pose)

    raw_input("\nPress Enter to return back to home state.")

    mgpi.move_to_joint_state(mgpi.home_joint_angles)


def demo_gripper(mgpi):
    """
    Demonstrates the use of the gripper
    :param mgpi: An object of the MoveGroupPythonInterface class
    """
    print("\n****************************")
    print("  5. Open and Close Gripper")
    print("****************************")
    print("Press Enter to continue..")
    raw_input()

    mgpi.open_gripper()
    rospy.sleep(2)
    mgpi.open_gripper()

def callback(input_msg):
    print(input_msg)

def main():
    try:
        raw_input("\nPress Enter to start the demo...")                         # Wait for Enter to be pressed
        print("  1. Creating and initializing the interface to the robot")
        print("------------------------------------------------------------")
        mgpi = MoveGroupPythonInteface()    # Create and Initialize the interface
        print("Simulation environment done.")

        # print useful information
        demo_print_information(mgpi)

        # joint space control
        demo_joint_space_control(mgpi)

        # Cartesian space control
        demo_cartesian_space_control(mgpi)

        # Open and close gripper
        mgpi.open_gripper()

        # deactivate the gripper after we are done
        mgpi.deactivate_gripper()

    except rospy.ROSInterruptException:
        # exit if there is any interruption from ROS
        return
    except KeyboardInterrupt:
        # exit if there is any interrupt from the keyboard (e.g. Ctrl+c)
        return


if __name__ == '__main__':
    main()
